!!! 5
%html
  %head
    %meta{ charset: "UTF-8" }
    %meta{ name: "viewport", content: "width=device-width, initial-scale=1.0" }
    %title In-Game Store
    :css
      body {
        margin: 0;
        font-family: Arial, sans-serif;
        background-color: #f5f5f5;
        overflow: hidden;
        display: flex; /* Ensure a consistent layout */
        flex-direction: column; /* Stack child elements vertically */
      }

      .background-video {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover; /* Ensures the video covers the entire screen */
        z-index: -1; /* Sends the video behind other elements */
      }

      .header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 10px 20px;
        background-color: rgba(0, 0, 0, 0.8);
        color: white;
        z-index: 1;
        width: 100%; /* Ensures the header spans the full width */
        box-sizing: border-box; /* Includes padding in width calculations */
      }

      .shards {
        font-size: 18px;
        font-weight: bold;
      }

      .tabs {
        display: flex;
        gap: 15px;
      }

      .tabs button {
        background: none;
        border: none;
        color: white;
        font-size: 16px;
        cursor: pointer;
      }

      .tabs button.active {
        border-bottom: 2px solid #f39c12;
      }

      .store-container {
        margin-top: 20px; /* Adds spacing below the header */
        padding: 20px;
        z-index: 1;
      }

      .item-list {
        display: flex;
        gap: 15px;
        overflow-x: auto;
        padding: 10px 0;
      }

      .item {
        color: black;
        min-width: 150px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background: white;
        text-align: center;
        padding: 10px;
      }

      .item img {
        width: 150px;         /* Set the fixed width */
        height: 150px;        /* Set the fixed height */
        object-fit: cover;    /* Ensures the image covers the area without distortion */
        border-radius: 8px;   /* Optionally, give the image rounded corners */
      }

      .background-img {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: url('#{asset_path('shopBackground.jpg')}'); /* Your background image */
        background-size: cover; /* Ensures the image covers the entire screen */
        background-position: center; /* Centers the image */
        background-repeat: no-repeat; /* Prevents image from repeating */
        z-index: -1; /* Sends the background behind other content */
      }

      /* New CSS for Description Styling */
      .item .description {
        font-size: 14px;
        color: #666;
        margin-top: 10px;
        padding: 0 10px;
        text-align: center;
      }
      .currency-selector {
        flex-direction: column;
        align-items: center;
        justify-content: center;
        position: relative;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.5);
        text-align: center;
      }

      .header .shards {
        display: flex;
        align-items: center;
        gap: 10px;
      }

      .header .shards img {
        width: 24px;
        height: 24px;
      }

      .menu-button {
        background-color: #e74c3c;
        color: white;
        font-weight: bold;
        font-size: 14px;
        padding: 10px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
      }

      .menu-button:hover {
        transform: scale(1.05);
        box-shadow: 0px 6px 12px rgba(0, 0, 0, 0.3);
      }

  %body
    %div.background-img{ style: "background-image: url('#{asset_path('shopBackground.jfif')}');" }

    .header
      .shards
        Shards: #{current_user.shards}
        %img{ src: asset_path("gem1.gif"), alt: "Shards Icon" }
      .tabs
        %button{ class: "active", onclick: "showCategory('shards')" } Shards
        %button{ onclick: "showCategory('avatars')" } Avatars
        %button{ onclick: "showCategory('consumables')" } Consumables
        %button{ onclick: "showCategory('weapons')" } Weapons
      %button{ onclick: "location.href='/games'", class: "menu-button" } Menu

    .store-container
      .currency-selector
        Denomination:
        %select{ id: "currency-dropdown", onchange: "updatePrices()" }
          %option{ value: "USD" } USD
          %option{ value: "EUR" } EUR
          %option{ value: "GBP" } GBP
          %option{ value: "JPY" } JPY
          %option{ value: "CAD" } CAD
          %option{ value: "AUD" } AUD
          %option{ value: "INR" } INR
          %option{ value: "CNY" } CNY
          %option{ value: "BRL" } BRL
.item-list{ id: "shards-list" }
  .item
    %img{ src: asset_path("gem1.gif"), alt: "Shard Item 1" }
    %h3 5 Shards
    %p{ class: "price", "data-usd": "3.75" } Price: $3.75
    %p.description A small shard pack, perfect for minor upgrades.
    %button{ class: "purchase-shard" } Purchase

  .item
    %img{ src: asset_path("gem2.gif"), alt: "Shard Item 2" }
    %h3 20 Shards
    %p{ class: "price", "data-usd": "15.00" } Price: $15.00
    %p.description A medium-sized shard pack, ideal for moderate upgrades.
    %button{ class: "purchase-shard" } Purchase

  .item
    %img{ src: asset_path("gem3.gif"), alt: "Shard Item 3" }
    %h3 100 Shards
    %p{ class: "price", "data-usd": "75.00" } Price: $75.00
    %p.description A large shard pack, perfect for powerful upgrades.
    %button{ class: "purchase-shard" } Purchase

  .item
    %img{ src: asset_path("money.gif"), alt: "Shard Item 4" }
    %h3
      %input{ type: "number", id: "custom-shards-input", min: "1", value: "5000", onchange: "updateCustomPrice()" }
      Shards
    %p{ id: "custom-price", "data-usd": "0.003", "data-eur": "0.0027", "data-gbp": "0.0024" } Price: $15.00
    %p.description Enter a custom amount and choose denomination.
    %button{ class: "purchase-shard" } Purchase

.item-list{ id: "avatars-list", style: "display:none" }
  .item
    %img{ src: asset_path("openailogo.gif"), alt: "AI Generated Avatar" }
    %h3 AI Generated Avatar
    %p Price: 10 Shards
    %p.description Create a unique avatar using AI technology.
    %button{ class: "purchase-item" } Create Avatar

.item-list{ id: "consumables-list", style: "display:none" }
  .item
    %img{ src: asset_path("healthPotion.gif"), alt: "Potion 1" }
    %h3 Health Potion
    %p Price: 100 Shards
    %p.description Restores health over time.
    %button{ class: "purchase-item" } Purchase

  .item
    %img{ src: asset_path("acidPotion.gif"), alt: "Potion 2" }
    %h3 Acid Potion
    %p Price: 150 Shards
    %p.description Deals damage to enemies upon contact.
    %button{ class: "purchase-item" } Purchase

  .item
    %img{ src: asset_path("revive.gif"), alt: "Potion 2" }
    %h3 Revive
    %p Price: 150 Shards
    %p.description Revives a fallen ally.
    %button{ class: "purchase-item" } Purchase

  .item
    %img{ src: asset_path("invisibilityPotion.gif"), alt: "Potion 3" }
    %h3 Invisibility Potion
    %p Price: 150 Shards
    %p.description Grants temporary invisibility.
    %button{ class: "purchase-item" } Purchase

.item-list{ id: "weapons-list", style: "display:none" }
  .item
    %img{ src: asset_path("sword.gif"), alt: "Utility Item 1" }
    %h3 Sword
    %p Price: 250 Shards
    %p.description A close combat weapon with high damage.
    %button{ class: "purchase-item" } Purchase

  .item
    %img{ src: asset_path("flameSword.gif"), alt: "Utility Item 1" }
    %h3 Flame Sword
    %p Price: 250 Shards
    %p.description A flaming close combat weapon.
    %button{ class: "purchase-item" } Purchase

  .item
    %img{ src: asset_path("bowAndArrow.gif"), alt: "Utility Item 1" }
    %h3 Bow and Arrow
    %p Price: 250 Shards
    %p.description A ranged weapon for quick attacks.
    %button{ class: "purchase-item" } Purchase

  .item
    %img{ src: asset_path("shotgun.gif"), alt: "Utility Item 1" }
    %h3 Shotgun
    %p Price: 250 Shards
    %p.description A close combat weapon with high damage.
    %button{ class: "purchase-item" } Purchase

  .item
    %img{ src: asset_path("sniper.gif"), alt: "Utility Item 2" }
    %h3 Sniper
    %p Price: 400 Shards
    %p.description A long-range weapon for precise shots.
    %button{ class: "purchase-item" } Purchase

    :javascript
      // Function to show popups
      function showPopup(message, isSuccess = true) {
        const popup = document.createElement('div');
        popup.className = isSuccess ? 'popup success' : 'popup error';
        popup.innerText = message;
        document.body.appendChild(popup);

        setTimeout(() => popup.remove(), 3000); // Remove popup after 3 seconds
      }

      // Logic for purchasing shards (preserved from the original code)
      document.querySelectorAll('.purchase-shard').forEach(button => {
        button.addEventListener('click', async () => {
          const item = button.closest('.item'); // Locate the parent .item
          let shardCount;

          // Check if the item is a shard purchase item (custom shards input or predefined price)
          if (item.querySelector('#custom-shards-input')) {
            const inputElement = item.querySelector('#custom-shards-input');
            shardCount = parseInt(inputElement.value);
          } else {
            const shardCountElement = item.querySelector('h3');
            shardCount = parseInt(shardCountElement.innerText.match(/\d+/)[0]);
          }

          console.log('Shard count:', shardCount); // Debug log

          // Send POST request to purchase shards
          const response = await fetch('/store/purchase_shards', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify({ shard_count: shardCount })
          });

          const result = await response.json();
          console.log('Server response:', result); // Debug log

          if (result.success) {
            showPopup(`Successfully purchased ${shardCount} shards!`, true);
            document.querySelector('.shards').innerText = `Shards: ${result.shards}`;
          } else {
            showPopup(result.message, false);
          }
        });
      });

      // Logic for purchasing items (avatars, consumables, and weapons)
      document.querySelectorAll('.purchase-item').forEach((button) => {
        button.addEventListener('click', async function (e) {
          const item = e.target.closest('.item');
          const itemPrice = parseInt(item.querySelector('p').textContent.match(/\d+/)[0]); // Extract price
          const itemType = item.querySelector('h3').textContent.trim(); // Extract item type

          // Send request to backend to check if the user has enough shards for the item purchase
          const response = await fetch('/store/purchase_item', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify({
              itemType: itemType,
              itemPrice: itemPrice
            }),
          });

          const result = await response.json();
          console.log('Item purchase response:', result); // Debug log

          if (result.success) {
            showPopup(`${itemType} purchased successfully!`, true);
            document.querySelector('.shards').innerText = `Shards: ${result.shards}`;

            if (itemType === "AI Generated Avatar") {
              window.location.href = "/ai_generated_skins/new";
            }
          } else {
            showPopup(`Insufficient funds for ${itemType}.`, false);
          }
        });
      });


      function showCategory(category) {
        document.querySelectorAll('.item-list').forEach(list => {
          list.style.display = 'none';
        });
        document.getElementById(`${category}-list`).style.display = 'flex';

        document.querySelectorAll('.tabs button').forEach(tab => {
          tab.classList.remove('active');
        });
        event.target.classList.add('active');

        // Show or hide the currency selector based on the active category
        const currencySelector = document.querySelector('.currency-selector');
        if (category === 'shards') {
          currencySelector.style.display = 'block';
        } else {
          currencySelector.style.display = 'none';
        }
      }

      async function fetchExchangeRates() {
        const response = await fetch('https://api.exchangerate-api.com/v4/latest/USD');
        const data = await response.json();
        return data.rates;
      }

      let exchangeRates = {};

      async function updatePrices() {
        if (!Object.keys(exchangeRates).length) {
          exchangeRates = await fetchExchangeRates();
        }

        const selectedCurrency = document.getElementById('currency-dropdown').value;
        const conversionRate = exchangeRates[selectedCurrency] || 1;

        const basePricePerShardUSD = 0.75; // New base rate

        const prices = document.querySelectorAll('.price');

        prices.forEach(priceElement => {
          const shardCount = parseInt(priceElement.previousElementSibling.innerText.match(/\d+/)[0]); // Extract shard count
          const newPrice = (shardCount * basePricePerShardUSD * conversionRate).toFixed(2);

          const currencySymbol = selectedCurrency === 'USD' ? '$' :
            selectedCurrency === 'EUR' ? '€' :
            selectedCurrency === 'GBP' ? '£' : selectedCurrency;

          priceElement.innerText = `Price: ${currencySymbol}${newPrice}`;
        });

        updateCustomPrice(); // Ensure custom option also updates
      }


      function updateCustomPrice() {
        const selectedCurrency = document.getElementById('currency-dropdown').value;
        const customInput = document.getElementById('custom-shards-input').value;
        // const basePricePerShardUSD = parseFloat(document.getElementById('custom-price').dataset.usd);
        const basePricePerShardUSD = 0.75; // Set the base price to 0.75 USD per shard
        const conversionRate = exchangeRates[selectedCurrency] || 1;
        const customPrice = (customInput * basePricePerShardUSD * conversionRate).toFixed(2);

        const currencySymbol = selectedCurrency === 'USD' ? '$' :
                                selectedCurrency === 'EUR' ? '€' :
                                selectedCurrency === 'GBP' ? '£' : selectedCurrency;

        document.getElementById('custom-price').innerText = `Price: ${currencySymbol}${customPrice}`;
      }

      // Initialize prices on page load
      document.addEventListener('DOMContentLoaded', updatePrices);
