<div class="interaction-page">
  <h1>Interaction with Enemy</h1>
  <p>Your position: (<%= @game_user.x_position %>, <%= @game_user.y_position %>)</p>

  <!-- Display player health bar -->
  <div class="player-info">
    <h3>Your Health</h3>
    <progress id="player-health" value="<%= @game_user.health %>" max="<%= @player.health %>"></progress>
    <p>Health: <span id="player-health-text"><%= @game_user.health %> / <%= @player.health %></span></p>
  </div>

  <!-- Display enemy stats and health bar -->
  <div class="enemy-info">
    <h3><%= @enemy.name %></h3>
    <p>Level: <%= @enemy.level %></p>
    <progress id="enemy-health" value="<%= @enemy.health %>" max="<%= @enemy.max_health %>"></progress>
    <p>Health: <span id="enemy-health-text"><%= @enemy.health %></span></p>
    <p>Attack: <%= @enemy.attack %></p>
    <p>Defense: <%= @enemy.defense %></p>
    <p>IQ: <%= @enemy.iq %></p>
    <p id="attack-message"></p>
  </div>

  <!-- Attack Button -->
  <button id="attack-button" data-game-id="<%= @game.code %>">Attack</button>

  <div class="interaction-footer">
    <%= link_to 'Return to Grid', grid_path, class: 'back-button' %>
  </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const attackButton = document.getElementById('attack-button');
        const enemyHealthDisplay = document.getElementById('enemy-health');
        const playerHealthDisplay = document.getElementById('player-health');
        const enemyHealthText = document.getElementById('enemy-health-text');
        const playerHealthText = document.getElementById('player-health-text');
        const attackMessage = document.getElementById('attack-message');

        // Function to change the health bar color based on health percentage
        function updateHealthBarColor(healthBar, health, maxHealth) {
            const healthPercentage = (health / maxHealth) * 100;
            if (healthPercentage < 25) {
                healthBar.style.setProperty('--health-bar-color', 'red');
            } else if (healthPercentage < 50) {
                healthBar.style.setProperty('--health-bar-color', 'yellow');
            } else {
                healthBar.style.setProperty('--health-bar-color', '#66cc66'); // Default green
            }
        }

        // Disable the attack button if either player's or enemy's health is 0
        function disableButtonIfNeeded(playerHealth, enemyHealth) {
            if (playerHealth <= 0 || enemyHealth <= 0) {
                attackButton.disabled = true;
            } else {
                attackButton.disabled = false;
            }
        }

        // Disable attack button if enemy is defeated
        function checkEnemyStatus(enemyHealth) {
            if (enemyHealth <= 0) {
                attackButton.disabled = true; // Disable the button if the enemy is defeated
            }
        }

        // Function to check if the player is in a grid with a defeated enemy
        function checkIfEnemyDefeated(enemyHealth) {
            if (enemyHealth <= 0) {
                attackButton.disabled = true; // Disable if the enemy is already defeated
            } else {
                attackButton.disabled = false;
            }
        }

        attackButton.addEventListener('click', () => {
            const gameId = attackButton.getAttribute('data-game-id');
            fetch(`/interactions/${gameId}/attack`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
                },
                body: JSON.stringify({ game_id: gameId })
            })
              .then(response => response.json())
              .then(data => {
                  // Directly set the new health values without animation
                  enemyHealthDisplay.value = data.enemy_health;
                  enemyHealthText.textContent = data.enemy_health;

                  playerHealthDisplay.value = data.player_health;
                  playerHealthText.textContent = `${data.player_health} / ${data.max_player_health}`;

                  // Update attack message
                  attackMessage.textContent = data.message;
                  updateHealthBarColor(playerHealthDisplay, data.player_health, parseInt(playerHealthDisplay.getAttribute('max')));


                  // Disable the attack button if the enemy is defeated or player health is 0
                  if (data.message === "You win!" || data.player_health <= 0 || data.enemy_health <= 0) {
                      attackButton.disabled = true;
                  }
              })
              .catch(error => {
                  console.error('Error:', error);
              });
        });

        // On page load, check initial enemy status
        const initialEnemyHealth = parseInt(enemyHealthText.textContent, 10);
        const initialPlayerHealth = parseInt(playerHealthText.textContent, 10);
        disableButtonIfNeeded(initialPlayerHealth, initialEnemyHealth);
        checkIfEnemyDefeated(initialEnemyHealth);
        updateHealthBarColor(playerHealthDisplay, initialPlayerHealth, parseInt(playerHealthDisplay.getAttribute('max')));
    });
</script>

