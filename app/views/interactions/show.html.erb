<div class="interaction-page">
  <div class="battle-screen">
    <!-- Player section -->
    <div class="player-section">
      <img src="<%= asset_path(@image) %>" alt="Player Avatar" class="player-avatar">
      <div class="player-info">
        <h3>Your Stats</h3>
        <p>Your position: (<%= @game_user.x_position %>, <%= @game_user.y_position %>)</p>
        <progress id="player-health" value="<%= @game_user.health %>" max="<%= @player.health %>"></progress>
        <p>Health: <span id="player-health-text"><%= @game_user.health %> / <%= @player.health %></span></p>
        <progress id="player-mana" value="<%= @game_user.mana %>" max="<%= @player.mana %>"></progress>
        <p>Mana: <span id="player-mana-text"><%= @game_user.mana %> / <%= @player.mana %></span></p>
      </div>

      <!-- New Weapon and Consumable Rows -->
      <div class="inventory-section">
        <!-- Weapons Row -->
        <div class="inventory-row weapons-row">
          <% if @weapons.present? %>
            <% @weapons.each do |weapon| %>
              <div class="inventory-item weapon-item <%= 'current-weapon' if weapon.current %>" onclick="useWeapon('<%= weapon.id %>')">
                <p class="item-name"><%= weapon.name %></p>
                <% if asset_path(weapon_image_filename(weapon.name)) %>
                  <%= image_tag asset_path(weapon_image_filename(weapon.name)), alt: weapon.name, class: "weapon-image" %>
                <% else %>
                  <p class="no-image-placeholder">No image available</p>
                <% end %>
              </div>
            <% end %>
          <% else %>
            <p>No weapons available.</p>
          <% end %>
        </div>

        <!-- Consumables Row -->
        <div class="inventory-row consumables-row">
          <% if @consumables.present? %>
            <% @consumables.each do |consumable| %>
              <div class="inventory-item consumable-item" onclick="useConsumable('<%= consumable.id %>')">
                <p class="item-name"><%= consumable.name %></p>
                <% if asset_path(consumable_image_filename(consumable.name)) %>
                  <%= image_tag asset_path(consumable_image_filename(consumable.name)), alt: consumable.name, class: "consumable-image" %>
                <% else %>
                  <p class="no-image-placeholder">No image available</p>
                <% end %>
              </div>
            <% end %>
          <% else %>
            <p>No consumables available.</p>
          <% end %>
        </div>
      </div>

      <!-- Action buttons and return link -->
      <div class="action-footer">
        <%= link_to 'Return to Grid', grid_path, class: 'back-button' %>
        <div class="divider"></div>
        <div class="action-buttons">
          <button id="attack-button" data-game-id="<%= @game.code %>">Attack</button>
          <button id="magic-attack-button" data-game-id="<%= @game.code %>">Magic Attack</button>
          <button id="magic-heal-button" data-game-id="<%= @game.code %>">Magic Heal</button>
        </div>
      </div>
    </div>

    <!-- Enemy section -->
    <div class="enemy-section">
      <img src="<%= asset_path('skeleton.png') %>" alt="Enemy Avatar" class="enemy-avatar">
      <div class="enemy-info">
        <h3><%= @enemy.name %></h3>
        <p>Level: <%= @enemy.level %></p>
        <progress id="enemy-health" value="<%= @enemy.health %>" max="<%= @enemy.max_health %>"></progress>
        <p>Health: <span id="enemy-health-text"><%= @enemy.health %></span></p>
        <p>Attack: <%= @enemy.attack %></p>
        <p>Defense: <%= @enemy.defense %></p>
        <p>IQ: <%= @enemy.iq %></p>
        <p id="attack-message"></p>
      </div>
    </div>

  </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const attackButton = document.getElementById('attack-button');
        const enemyHealthDisplay = document.getElementById('enemy-health');
        const playerHealthDisplay = document.getElementById('player-health');
        const enemyHealthText = document.getElementById('enemy-health-text');
        const playerHealthText = document.getElementById('player-health-text');
        const attackMessage = document.getElementById('attack-message');
        const magicAttackButton = document.getElementById('magic-attack-button');
        const magicHealButton = document.getElementById('magic-heal-button');
        const playerManaDisplay = document.getElementById('player-mana');

        function useWeapon(weaponId) {
            console.log(`Setting weapon with ID: ${weaponId} as current.`);

            // Adjust the fetch URL to match the new route
            fetch(`/interactions/set_current_weapon/${weaponId}`, {
                method: 'POST', // Or 'PATCH' if you prefer
                headers: {
                    'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
                    'Content-Type': 'application/json'
                }
            })
              .then(response => response.json())
              .then(data => {
                  if (data.success) {
                      alert(`Weapon ${weaponId} set as current!`);
                      location.reload(); // Reload to update the view (optional)
                  } else {
                      alert('Failed to set weapon as current');
                  }
              })
              .catch(error => {
                  console.error('Error:', error);
                  alert('There was an error setting the weapon as current');
              });
        }

        function useConsumable(consumableId) {
            console.log(`Using consumable with ID: ${consumableId}`);
            // Placeholder functionality
            alert(`Consumable ${consumableId} used!`);
        }

        function updateHealthBarColor(healthBar, health, maxHealth) {
            const healthPercentage = (health / maxHealth) * 100;
            if (healthPercentage < 25) {
                healthBar.style.setProperty('--health-bar-color', 'red');
            } else if (healthPercentage < 50) {
                healthBar.style.setProperty('--health-bar-color', 'yellow');
            } else {
                healthBar.style.setProperty('--health-bar-color', '#66cc66'); // Default green
            }
        }

        function updateManaDisplay(mana, maxMana) {
            playerManaDisplay.value = mana;
            document.getElementById('player-mana-text').textContent = `${mana} / ${maxMana}`;
        }

        function disableButtonIfNeeded(playerHealth, enemyHealth) {
            if (playerHealth <= 0 || enemyHealth <= 0) {
                attackButton.disabled = true;
                magicAttackButton.disabled = true;
                magicHealButton.disabled = true;
            } else {
                attackButton.disabled = false;
                magicAttackButton.disabled = false;
                magicHealButton.disabled = false;
            }
        }

        attackButton.addEventListener('click', () => {
            const gameId = attackButton.getAttribute('data-game-id');
            fetch(`/interactions/${gameId}/attack`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
                },
                body: JSON.stringify({ game_id: gameId })
            })
              .then(response => response.json())
              .then(data => {
                  game_logic(data)
              })
              .catch(error => {
                  console.error('Error:', error);
              });
        });

        magicAttackButton.addEventListener('click', () => {
            const gameId = magicAttackButton.getAttribute('data-game-id');
            fetch(`/interactions/${gameId}/magic_attack`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
                },
                body: JSON.stringify({ game_id: gameId })
            })
              .then(response => response.json())
              .then(data => {
                  if (data.success) {
                      game_logic(data)
                      updateManaDisplay(data.player_mana, data.max_mana);
                  } else {
                      attackMessage.textContent = data.message
                  }
              });
        });

        magicHealButton.addEventListener('click', () => {
            const gameId = magicHealButton.getAttribute('data-game-id');
            fetch(`/interactions/${gameId}/magic_heal`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
                },
                body: JSON.stringify({ game_id: gameId })
            })
              .then(response => response.json())
              .then(data => {
                  if (data.success) {
                      game_logic(data)
                      updateManaDisplay(data.player_mana, data.max_mana);
                  } else {
                      attackMessage.textContent = data.message
                  }
              });
        });

        attackButton.addEventListener('click', () => {
            const gameId = attackButton.getAttribute('data-game-id');
            fetch(`/interactions/${gameId}/attack`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
                },
                body: JSON.stringify({ game_id: gameId })
            })
              .then(response => response.json())
              .then(data => {
                  game_logic(data)
              })
              .catch(error => {
                  console.error('Error:', error);
              });
        });

        function game_logic(data) {
            if (data.win) {
                enemyHealthDisplay.value = 0;
                enemyHealthText.textContent = 0;
                attackMessage.textContent += " Redirecting to the win page...";
                setTimeout(() => {
                    window.location.href = `/win_game?game_id=${gameId}`;
                }, 2000);
                return;
            }

            enemyHealthDisplay.value = data.enemy_health;
            enemyHealthText.textContent = data.enemy_health;

            attackMessage.textContent = data.message;
            updateHealthBarColor(playerHealthDisplay, data.player_health, parseInt(playerHealthDisplay.getAttribute('max')));


            if (data.message === "You win!" || data.player_defeated || data.enemy_health <= 0) {
                attackButton.disabled = true;
                magicAttackButton.disabled = true;
                magicHealButton.disabled = true;
            }

            if (data.player_defeated) {
                playerHealthDisplay.value = 0;
                playerHealthText.textContent = `0 / ${data.max_player_health}`;
                setTimeout(() => {
                    window.location.href = "/grid";
                }, 4000);
            } else {
                playerHealthDisplay.value = data.player_health;
                playerHealthText.textContent = `${data.player_health} / ${data.max_player_health}`;
            }
        }

        const initialEnemyHealth = parseInt(enemyHealthText.textContent, 10);
        const initialPlayerHealth = parseInt(playerHealthText.textContent, 10);
        disableButtonIfNeeded(initialPlayerHealth, initialEnemyHealth);
        updateHealthBarColor(playerHealthDisplay, initialPlayerHealth, parseInt(playerHealthDisplay.getAttribute('max')));
    });
</script>

<style>
    .inventory-row {
        display: flex;
        gap: 10px;
        margin: 10px 0;
    }

    .inventory-item {
        background-color: #1e1e1e;
        color: #ffffff;
        padding: 10px;
        max-height: 50px;
        max-width: 50px;
        border-radius: 8px;
        text-align: center;
        flex: 1;
        position: relative; /* Ensure positioning context for the text */
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    .consumable-image,
    .weapon-image {
        max-height: 50px;
        max-width: 50px;
        object-fit: cover; /* Ensures the image fits the container */
    }

    /* Style for item names to overlap on images */
    .item-name {
        font-size: 14px;
        margin: 0;
        position: absolute;
        top: 50%; /* Vertically center text */
        left: 50%; /* Horizontally center text */
        transform: translate(-50%, -50%); /* Adjust position to center exactly */
        z-index: 1; /* Make sure the text is on top */
        color: white; /* Text color for visibility */
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.7); /* Optional: Adds a shadow for better readability */
    }

    /* Optional: For item quantity if needed */
    .item-quantity {
        position: absolute;
        bottom: 5px;
        right: 10px;
        font-size: 12px;
        color: #cccccc;
    }

    .inventory-item:hover {
        background-color: #333333;
    }
    .current-weapon {
        border: 3px solid green;
        box-shadow: 0 0 10px green; /* Optional: adds a glowing effect */
    }
</style>
