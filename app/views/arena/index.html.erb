<!DOCTYPE html>
<html>
<head>
  <title>Arena</title>
  <%= javascript_include_tag "application", "data-turbo-track": "reload" %>
  <style>
      /* Your existing CSS */
  </style>
</head>
<body>
<div id="arena">
  <h1>Welcome to the Arena</h1>
  <span class="current-user">
    Current User: <%= current_user.username %>
  </span>

  <div id="messages">
    <p>Messages will appear here...</p>
  </div>

  <div>
    <h3 id="player-1-name">Player 1</h3>
    <p>Health: <span id="player-1-health">N/A</span></p>
  </div>
  <div>
    <h3 id="player-2-name">Player 2</h3>
    <p>Health: <span id="player-2-health">N/A</span></p>
  </div>

  <div id="assign-players">
    <button id="player-1-button" onclick="assignPlayer(1)" disabled>Player 1</button>
    <button id="player-2-button" onclick="assignPlayer(2)" disabled>Player 2</button>
  </div>

  <div id="attack-buttons">
    <button id="attack-button" onclick="attack(1)" disabled>Player 1 Attack</button>
    <button id="attack-button-2" onclick="attack(2)" disabled>Player 2 Attack</button>
    <button id="disconnect-button" onclick="disconnectChannel()">Disconnect</button>
  </div>
  <div class="interaction-footer">
    <%= link_to 'Return to Grid', grid_path, class: 'back-button' %>
  </div>
</div>

<script>
    let currentPlayer = null;
    let channel = null;
    let arenaId = 1;  // Arena ID for this game
    let playerId = null;  // Player ID (assigned dynamically)
    const currentUserName = "<%= @user.username %>";

    document.addEventListener('DOMContentLoaded', function() {
        const consumer = ActionCable.createConsumer();
        document.getElementById('player-1-button').disabled = false;
        document.getElementById('player-2-button').disabled = false;
        document.getElementById('attack-button').disabled = false;
        document.getElementById('attack-button-2').disabled = false;

        // Subscribe to the arena channel
        channel = consumer.subscriptions.create(
            { channel: "ArenaChannel", arena_id: arenaId },
            {
                connected() {
                    console.log("Connected to ArenaChannel");
                },

                disconnected() {
                    console.log("Disconnected from ArenaChannel");
                },

                received(data) {
                    console.log(data);  // Log the data to see its structure

                    // Update player buttons based on current game state
                    if (data.players) {
                        if (data.players[1]) {
                            document.getElementById('player-1-name').textContent = data.players[1].username;
                            document.getElementById('player-1-health').textContent = data.players[1].health;
                        } else {
                            document.getElementById('player-1-name').textContent = "Player 1";
                            document.getElementById('player-1-health').textContent = "N/A";
                        }

                        if (data.players[2]) {
                            document.getElementById('player-2-name').textContent = data.players[2].username;
                            document.getElementById('player-2-health').textContent = data.players[2].health;
                        } else {
                            document.getElementById('player-2-name').textContent = "Player 2";
                            document.getElementById('player-2-health').textContent = "N/A";
                        }
                    }

                    const currentTurn = data.current_turn !== undefined ? data.current_turn : 'N/A';
                    document.getElementById('current-turn').textContent = currentTurn;

                    // Display the message
                    const messageDiv = document.getElementById('messages');
                    messageDiv.innerHTML += `<p>${data.message}</p>`;
                    messageDiv.scrollTop = messageDiv.scrollHeight;

                    // Enable/disable attack buttons based on the current turn
                    if (data.current_turn === 1) {
                        document.getElementById('attack-button').disabled = false;
                        document.getElementById('attack-button-2').disabled = true;
                    } else if (data.current_turn === 2) {
                        document.getElementById('attack-button').disabled = true;
                        document.getElementById('attack-button-2').disabled = false;
                    } else {
                        document.getElementById('attack-button').disabled = false;
                        document.getElementById('attack-button-2').disabled = false;
                    }
                },
            }
        );

    });

    function assignPlayer(playerNumber) {
        playerId = playerNumber;
        // Send the assignment to the backend
        console.log(currentUserName)
        channel.send({ action: 'assign_player', player_id: playerId, user_name: currentUserName });
    }

    function attack(playerId) {
        channel.send({ action: 'attack', player_id: playerId });
    }

    function disconnectChannel() {
        if (channel) {
            console.log("You have disconnected from ArenaChannel");
        } else {
            console.log("No active channel to disconnect from.");
        }
    }
</script>
</body>
</html>
